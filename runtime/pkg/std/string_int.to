func swap_i8(l<i8*>,r<i8*>){
    tmp<i8> = *l
    *l = *r
    *r = tmp
}
func reverse(str<i8*>, length<i32>)
{
    start<i32> = 0
    end<i32>   = length - 1
    while start < end {
        swap_i8(str+start,str + end)
        start += 1
        end -= 1
    }
}
func itoa(num<i32>, str<i8*>, base<i32>)
{
    i<i32> = 0
	isNegative<i32> = 0
    strp<i8*> = null
	
    //Handle 0 explicitely, otherwise empty string is printed for 0 
    if num == 0 {
        //str[0] = '0'
        //str[1] = '\0'
        strp     = str
        *strp    = 48
        i += 1
        strp += 1
        *strp = 0
        return str
    }
  
    // In standard itoa(), negative numbers are handled only with 
    // base 10. Otherwise numbers are considered unsigned.
    if num < 0 && base == 10 {
        isNegative = 1
        num = 0 - num
    }
  
    // Process individual digits
    while num != 0 {
        rem<i32>  = num % base
        strp = str + i
        i += 1
        if rem > 9 
            *strp = rem - 10 + 97 # 'a'
        else
            *strp = rem + 48 #'0'
        num = num / base
    }
  
    // If number is negative, append '-'
    if isNegative != 0 {
        //str[i++] = '-'
        strp = str + i
        i += 1
        *strp = 45 # -
    }
    // str[i] = '\0'  Append string terminator
    strp = strp + i 
    *strp = 0
  
    // Reverse the string
    reverse(str, i)
  
    return str
}