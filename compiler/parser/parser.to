use string

class Parser{
    gvars # map[string]VarExpr global vars

    //stor all global function
    funcs        # map[string]Function
    extern_funcs # map[string]Function

    strs          # [StringExpr]  all static string
    
    links         # [string] ld link args

    line column fileno

    pkg # Package*
    full_package # package name
    package      
    filename
    asmfile
    filepath

    //currently scanner
    scanner #Scanner*
    import  # map[string]string    full package path => user use path
}
# count = 1
count

Parser::init(filepath,pkg,package,full_package) {
    //init default env
    this.pkg = pkg
    this.currentFunc = null
    this.package = package
    this.filepath = filepath

    fullname = std.pop(string.split(filepath,"/"))
    filename = string.sub(fullname,0,std.len(fullname) - 3)
    asmfile  = filename + ".s"
    if package != "main"
        asmfile  = "co_" + package + "_" + asmfile
    this.full_package = full_package
    
    scanner = new Scanner(filepath,this)
    
    this.import[package] = full_package
    
    this.import[""]  = full_package
}


Parser::parse()
{
    scanner.scan()

    while true 
    {
        match scanner.curToken 
        {
            FUNC : {
                f = parseFuncDef()
                this.addFunc(f.name,f)
            }
            EXTERN : {
                f = parseExternDef()
                this.addFunc(f.name, f)
            }
            EXTRA : parseExtra()
            USE   : parseImportDef()
            CLASS : parseClassDef()
            MEM   : parseStructDef()
            ENUM  : parseEnumDef()
            _     : parseGlobalDef()
            END   : return null
        }
    }
}
Parser::getpkgname()
{
    return this.full_package
}
Parser::panic(err){
    this.check(false,err)
}
Parser::check(check , err)
{
    if check return  null
    parse_err("parse: found token error token:%d:%s \n"
              "msg:%s\n"
              "line:%d column:%d file:%s\n",
              scanner.curToken,getTokenString(scanner.curToken),
              err,
              scanner.line,scanner.column,filepath)
    os.exit(-1)
}

