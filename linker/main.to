
use fmt
use link
use os 
use std

func print_help(){
    fmt.println("usage: ./cld [options|file.o...]\n" +
                "  -p       指定扫描目录下所有.0文件进行链接生成可执行程序\n" +
                "  file.o   ... 手动指定多个file.o进行链接\n"
    )
}

func link(){
    fmt.println("main.link")
    linker  = new link.Linker()
    outfile = "bin"
    for(obj : os.argv){
        # 添加目标文件
        linker.addElf(obj)
    }
    # 开始链接
    linker.link(outfile)
}

func scan(){
    fmt.println("main.scan")
    linker  = new link.Linker()

    found = false

    outfile = "bin" 
    # 扫描所有路径
    for(dir : os.argv){
        if dir == "-p" continue
        if !std.is_dir(dir) os.die(dir + " not exist")
        # 迭代目录文件
        fd = std.opendir(dir)
        while true {
            file = std.readdir(fd)
            if !file break
            if !file.isFile() continue
            # 解析目标文件
            filename = file.path
            if string.sub(filename,std.len(filename) - 2) == ".o" {
                linker.addElf(file.path)
                found = true
            }
        }
    }
    if !found {
        os.die("should provide at least one .o file")
    }
    # 开始链接
    linker.link(outfile)
    fmt.println("all generate passed")
}


func main() {
    if  os.argc < 1 {
        return print_help()
    }
    //scan
    if os.argv[0] == "-p" {
        return scan()
    }
    return link()

}
