package elf

import io

# 写入header头
# 写入程序表头
File::writeHeader(out) 
{
    bytes = 0

	fp = io.fopen(out,"w+")
    bytes += ehdr.e_ehsize

	# elf文件头
    io.fwrite(ehdr, ehdr.e_ehsize, 1, fp)

    if len(phdrTab) != 0 {  //程序头表
        for (phd : phdrTab) {
            bytes += ehdr.e_phentsize;
			# 写入程序表头
            io.fwrite(phd, ehdr.e_phentsize, 1, fp);
        }
    }
    io.fclose(fp);
	return bytes
}

# 1. 写入段表 + 段字符串表
# 2. 写入符号表 + 符号字符串表
File::writeSecSym(out) 
{
    bytes = 0

    fp = io.fopen(out,"a+");
    bytes += shstrtabSize;
    #字符串段表: 写入所有关于段名的字符串 .shstrtab
    io.fwrite(shstrtab,shstrtabSize,1,fp);
    #段表: 写入所有段
    for(i = 0;i < len(shdrNames); i += 1)
    {
		sh = shdrTab[shdrNames[i]]
        bytes += ehdr.e_shentsize;
        io.fwrite(sh,ehdr.e_shentsize,1,fp)
    }
    #符号表: 写入所有符号
    for(i = 0;i < len(symNames.size() ; i += 1)
    {
		sym = symTab[symNames[i]];
        bytes += sizeof(Elf64_Sym);
        io.fwrite(sym,sizeof(Elf64_Sym),1,fp)
    }
    # 字符串表: 写入所有字符串
    bytes += strtabSize
    io.fwrite(strtab,strtabSize,1,fp)
    io.fclose(fp)

    return bytes
}

